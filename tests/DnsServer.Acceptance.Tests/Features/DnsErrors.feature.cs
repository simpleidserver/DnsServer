// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DnsServer.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DnsErrorsFeature : Xunit.IClassFixture<DnsErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DnsErrors.feature"
#line hidden
        
        public DnsErrorsFeature(DnsErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DnsErrors", "\tCheck errors returned by DNS server", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when more than one question is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "DnsErrors")]
        [Xunit.TraitAttribute("Description", "Check error is returned when more than one question is passed")]
        public virtual void CheckErrorIsReturnedWhenMoreThanOneQuestionIsPassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when more than one question is passed", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table14.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "STAR"});
            table14.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "STAR"});
#line 5
 testRunner.When("execute DNS request", ((string)(null)), table14, "When ");
#line 10
 testRunner.Then("DNS flag is equal to \'RESPONSE|REFUSED\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when requested type is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "DnsErrors")]
        [Xunit.TraitAttribute("Description", "Check error is returned when requested type is not supported")]
        public virtual void CheckErrorIsReturnedWhenRequestedTypeIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when requested type is not supported", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table15.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "NOT_SUPPORTED"});
#line 13
 testRunner.When("execute DNS request", ((string)(null)), table15, "When ");
#line 17
 testRunner.Then("DNS flag is equal to \'RESPONSE|NOT_IMPLEMENTED\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when requested class is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "DnsErrors")]
        [Xunit.TraitAttribute("Description", "Check error is returned when requested class is not supported")]
        public virtual void CheckErrorIsReturnedWhenRequestedClassIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when requested class is not supported", null, ((string[])(null)));
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table16.AddRow(new string[] {
                        "example.com",
                        "NOT_SUPPORTED",
                        "STAR"});
#line 20
 testRunner.When("execute DNS request", ((string)(null)), table16, "When ");
#line 24
 testRunner.Then("DNS flag is equal to \'RESPONSE|FORMAT_ERROR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DnsErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DnsErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
