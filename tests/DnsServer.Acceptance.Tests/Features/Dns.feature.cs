// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DnsServer.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DnsFeature : Xunit.IClassFixture<DnsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Dns.feature"
#line hidden
        
        public DnsFeature(DnsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Dns", "\tCheck DNS server", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Check CNAME are returned by the autoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check CNAME are returned by the autoritative DNS server")]
        public virtual void CheckCNAMEAreReturnedByTheAutoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check CNAME are returned by the autoritative DNS server", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table1.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "CNAME"});
#line 5
 testRunner.When("execute DNS request", ((string)(null)), table1, "When ");
#line 9
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.Then("key \'Answers[0].ResourceRecord.CNAME\' equals to \'www.example.net\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.Then("key \'Answers[1].ResourceRecord.CNAME\' equals to \'www.example.org\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.Then("key \'Answers[2].ResourceRecord.CNAME\' equals to \'www.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check HINFO is returned by authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check HINFO is returned by authoritative DNS server")]
        public virtual void CheckHINFOIsReturnedByAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check HINFO is returned by authoritative DNS server", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table2.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "HINFO"});
#line 15
 testRunner.When("execute DNS request", ((string)(null)), table2, "When ");
#line 19
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.Then("key \'Answers[0].ResourceRecord.CPU\' equals to \'intel\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.Then("key \'Answers[0].ResourceRecord.OS\' equals to \'win\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check MB is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check MB is returned by the authoritative DNS server")]
        public virtual void CheckMBIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check MB is returned by the authoritative DNS server", null, ((string[])(null)));
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table3.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "MB"});
#line 24
 testRunner.When("execute DNS request", ((string)(null)), table3, "When ");
#line 28
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.Then("key \'Answers[0].ResourceRecord.MADNAME\' equals to \'mail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check MG is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check MG is returned by the authoritative DNS server")]
        public virtual void CheckMGIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check MG is returned by the authoritative DNS server", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table4.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "MG"});
#line 32
 testRunner.When("execute DNS request", ((string)(null)), table4, "When ");
#line 36
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.Then("key \'Answers[0].ResourceRecord.MGMNAME\' equals to \'group.mail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check MINFO is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check MINFO is returned by the authoritative DNS server")]
        public virtual void CheckMINFOIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check MINFO is returned by the authoritative DNS server", null, ((string[])(null)));
#line 39
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table5.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "MINFO"});
#line 40
 testRunner.When("execute DNS request", ((string)(null)), table5, "When ");
#line 44
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.Then("key \'Answers[0].ResourceRecord.EMAILBX\' equals to \'admin@mail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.Then("key \'Answers[0].ResourceRecord.RMAILBX\' equals to \'error@mail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check MR is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check MR is returned by the authoritative DNS server")]
        public virtual void CheckMRIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check MR is returned by the authoritative DNS server", null, ((string[])(null)));
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table6.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "MR"});
#line 49
 testRunner.When("execute DNS request", ((string)(null)), table6, "When ");
#line 53
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.Then("key \'Answers[0].ResourceRecord.NEWNAME\' equals to \'name@mail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check MX is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check MX is returned by the authoritative DNS server")]
        public virtual void CheckMXIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check MX is returned by the authoritative DNS server", null, ((string[])(null)));
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table7.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "MX"});
#line 57
 testRunner.When("execute DNS request", ((string)(null)), table7, "When ");
#line 61
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.Then("key \'Answers[0].ResourceRecord.Preference\' equals to \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.Then("key \'Answers[0].ResourceRecord.Exchange\' equals to \'mail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check NS is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check NS is returned by the authoritative DNS server")]
        public virtual void CheckNSIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check NS is returned by the authoritative DNS server", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table8.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "NS"});
#line 66
 testRunner.When("execute DNS request", ((string)(null)), table8, "When ");
#line 70
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.Then("key \'Answers[0].ResourceRecord.NSDName\' equals to \'example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check PTR is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check PTR is returned by the authoritative DNS server")]
        public virtual void CheckPTRIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check PTR is returned by the authoritative DNS server", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table9.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "PTR"});
#line 74
 testRunner.When("execute DNS request", ((string)(null)), table9, "When ");
#line 78
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.Then("key \'Answers[0].ResourceRecord.PTRDNAME\' equals to \'example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check SOA is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check SOA is returned by the authoritative DNS server")]
        public virtual void CheckSOAIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check SOA is returned by the authoritative DNS server", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table10.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "SOA"});
#line 82
 testRunner.When("execute DNS request", ((string)(null)), table10, "When ");
#line 86
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.Then("key \'Answers[0].ResourceRecord.MName\' equals to \'example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.Then("key \'Answers[0].ResourceRecord.RName\' equals to \'mail.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.Then("key \'Answers[0].ResourceRecord.Serial\' equals to \'9999\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.Then("key \'Answers[0].ResourceRecord.Refresh\' equals to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.Then("key \'Answers[0].ResourceRecord.Retry\' equals to \'1001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.Then("key \'Answers[0].ResourceRecord.Expire\' equals to \'1002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
 testRunner.Then("key \'Answers[0].ResourceRecord.Minimum\' equals to \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check TXT is returned by the authoritative DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check TXT is returned by the authoritative DNS server")]
        public virtual void CheckTXTIsReturnedByTheAuthoritativeDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check TXT is returned by the authoritative DNS server", null, ((string[])(null)));
#line 95
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table11.AddRow(new string[] {
                        "example.com",
                        "IN",
                        "TXT"});
#line 96
 testRunner.When("execute DNS request", ((string)(null)), table11, "When ");
#line 100
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.Then("key \'Answers[0].ResourceRecord.TxtData\' equals to \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check A is returned by the recursive DNS server")]
        [Xunit.TraitAttribute("FeatureTitle", "Dns")]
        [Xunit.TraitAttribute("Description", "Check A is returned by the recursive DNS server")]
        public virtual void CheckAIsReturnedByTheRecursiveDNSServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check A is returned by the recursive DNS server", null, ((string[])(null)));
#line 103
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table12.AddRow(new string[] {
                        "google.com",
                        "IN",
                        "A"});
#line 104
 testRunner.When("execute DNS request", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "Class",
                        "Type"});
            table13.AddRow(new string[] {
                        "google.com",
                        "IN",
                        "A"});
#line 108
 testRunner.And("execute DNS request", ((string)(null)), table13, "And ");
#line 112
 testRunner.Then("DNS flag is equal to \'RESPONSE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DnsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DnsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
